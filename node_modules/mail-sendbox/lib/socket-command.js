var net             = require('net');
var dataProcess     = require('./data-process');
var sender          = require('./mail-sender');

var socketProto = net.Socket.prototype;

var socketSendboxCommand = function( socket ) {

    var _receivedData = "";

    this.helloMessage = function() {
        socket.writeln("200")
    };

    this.readData = function(data) {
        _receivedData += data;
    };

    this.processData = function() {
        var processedData = dataProcess.processData( _receivedData );
        var command = processedData.getCommand();
        switch ( command ) {
            case 'SEND':
                sender.sendMail( processedData.getTransportData(), processedData.getMailData(), function(response) {
                    console.log( response.message )
                });
                break;
            case 'RESET':
                this.resetData();
                break;
            case 'QUIT':
                this.closeConnection();
                socket.end();
                break;
            default:
                throw new Error('Command "' + command + '" doesn\'t exist!');
                break;
        }
    };

    this.resetData = function() {
        _receivedData = '';
    };

    this.closeConnection = function() {
        this.resetData();
        socket.deleteSendboxCommands();
        socket = null;
    };

};

socketProto.getSendboxCommands = function() {
    if (!(this._socketSendboxCommand instanceof socketSendboxCommand)) {
        this._socketSendboxCommand = new socketSendboxCommand( this );
    }
    return this._socketSendboxCommand;
};

socketProto.deleteSendboxCommands = function() {
    this._socketClosed = true;
    delete this._socketSendboxCommand;
};

socketProto.writeln = function(message) {
    if (!this._socketClosed) {
        this.write( message + '\n' );
    }
};